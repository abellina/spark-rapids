<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2020-2021, NVIDIA CORPORATION.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.nvidia</groupId>
    <artifactId>rapids-4-spark-parent</artifactId>
    <version>21.08.0-SNAPSHOT</version>
  </parent>
  <artifactId>rapids-4-spark_2.12</artifactId>
  <name>RAPIDS Accelerator for Apache Spark Distribution</name>
  <description>Creates the distribution package of the RAPIDS plugin for Apache Spark</description>

  <dependencies>
    <dependency>
       <groupId>com.nvidia</groupId>
       <artifactId>rapids-4-spark-sql_${scala.binary.version}</artifactId>
       <version>${project.version}</version>
    </dependency>
    <dependency>
       <groupId>com.nvidia</groupId>
       <artifactId>rapids-4-spark-shuffle_${scala.binary.version}</artifactId>
       <version>${project.version}</version>
    </dependency>
    <dependency>
       <groupId>com.nvidia</groupId>
       <artifactId>rapids-4-spark-shims-aggregator_${scala.binary.version}</artifactId>
       <version>${project.version}</version>
    </dependency>
    <dependency>
       <groupId>com.nvidia</groupId>
       <artifactId>rapids-4-spark-udf_${scala.binary.version}</artifactId>
       <version>${project.version}</version>
    </dependency>
    <dependency>
       <!-- required for conf generation script -->
       <groupId>org.apache.spark</groupId>
       <artifactId>spark-sql_${scala.binary.version}</artifactId>
       <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- required for conf generation script -->
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-hive_${scala.binary.version}</artifactId>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <!-- number of shims can be reduced to the number of compatibility domain
         Use the most recent version from each compatibilty domain. Typically we expect
         that patch releases are backwards compatible. So we take the shim representing the
         most recent version in the backwards compatibility domain to take care of the entire
         domain

         spark3.0.1 through spark 3.0.3, potentially 3.0.4 if the current breakage is eliminated
         spark 3.1.x , as long as patch version don't break us
         spark 3.2.x,  as long as patch version don't break us
         -->
        <executions>
          <execution>
            <id>shim301-fat-jar</id>
            <goals><goal>shade</goal></goals>
            <configuration>
              <shadedClassifierName>spark301</shadedClassifierName>
              <shadedArtifactAttached>true</shadedArtifactAttached>
                <createDependencyReducedPom>true</createDependencyReducedPom>
                <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
                <artifactSet>
                    <includes>
                        <include>*:rapids-4-spark-shims-spark301_${scala.binary.version}:*</include>
                        <include>com.google.flatbuffers:*</include>
                        <include>org.openucx:*</include>
                    </includes>
                </artifactSet>
            </configuration>
          </execution>
          <execution>
            <id>shim302-fat-jar</id>
            <goals><goal>shade</goal></goals>
            <configuration>
              <shadedClassifierName>spark302</shadedClassifierName>
              <shadedArtifactAttached>true</shadedArtifactAttached>
                <createDependencyReducedPom>true</createDependencyReducedPom>
                <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
                <artifactSet>
                    <includes>
                        <include>*:rapids-4-spark-shims-spark302_${scala.binary.version}:*</include>
                        <include>com.google.flatbuffers:*</include>
                        <include>org.openucx:*</include>
                    </includes>
                </artifactSet>
            </configuration>
          </execution>
          <execution>
            <id>shim303-fat-jar</id>
            <goals><goal>shade</goal></goals>
            <configuration>
              <shadedClassifierName>spark303</shadedClassifierName>
              <shadedArtifactAttached>true</shadedArtifactAttached>
                <createDependencyReducedPom>true</createDependencyReducedPom>
                <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
                <artifactSet>
                    <includes>
                        <include>*:rapids-4-spark-shims-spark303_${scala.binary.version}:*</include>
                        <include>com.google.flatbuffers:*</include>
                        <include>org.openucx:*</include>
                    </includes>
                </artifactSet>
            </configuration>
          </execution>
          <execution>
            <id>shim311-fat-jar</id>
            <goals><goal>shade</goal></goals>
            <configuration>
              <shadedClassifierName>spark311</shadedClassifierName>
              <shadedArtifactAttached>true</shadedArtifactAttached>
                <createDependencyReducedPom>true</createDependencyReducedPom>
                <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
                <artifactSet>
                    <includes>
                        <include>*:rapids-4-spark-shims-spark311_${scala.binary.version}:*</include>
                        <include>com.google.flatbuffers:*</include>
                        <include>org.openucx:*</include>
                    </includes>
                </artifactSet>
            </configuration>
          </execution>
          <execution>
            <id>shim312-fat-jar</id>
            <goals><goal>shade</goal></goals>
            <configuration>
              <shadedClassifierName>spark312</shadedClassifierName>
              <shadedArtifactAttached>true</shadedArtifactAttached>
                <createDependencyReducedPom>true</createDependencyReducedPom>
                <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
                <artifactSet>
                    <includes>
                        <include>*:rapids-4-spark-shims-spark312_${scala.binary.version}:*</include>
                        <include>com.google.flatbuffers:*</include>
                        <include>org.openucx:*</include>
                    </includes>
                </artifactSet>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- iterate individual fat jars to create a single fat jar with the the dependencies prefixed -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals><goal>run</goal></goals>
            <id>create-parallel-world</id>
            <configuration>
              <target>
                <!-- common code is taken from the most recent version -->
                <unzip
                        src="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}-spark312.jar"
                        dest="${project.build.directory}/parallel-world"
                >
                  <patternset id="sharedWorld">
                    <include name="com/nvidia/spark/SQLPlugin*"/>
                    <include name="com/nvidia/spark/ExclusiveModeGpuDiscoveryPlugin*"/>
                    <include name="com/nvidia/spark/rapids/ShimLoader*"/>
                    <include name="com/nvidia/spark/rapids/SparkShims*"/>
                    <include name="com/nvidia/spark/rapids/SparkShimServiceProvider*"/>
                    <include name="com/nvidia/spark/rapids/SQLExecPlugin*"/>
                    <include name="com/nvidia/spark/udf/Plugin*"/>

                    <include name="com/google/flatbuffers/**"/>
                    <include name="libjucx.so"/>
                    <include name="org/openucx/**"/>
                  </patternset>
                </unzip>

                <unzip
                        src="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}-spark301.jar"
                        dest="${project.build.directory}/parallel-world/spark301"
                >
                  <!-- to keep in sync with sharedWorld: inverse it to exclude -->
                  <patternset id="shimPattern">
                    <exclude name="com/nvidia/spark/SQLPlugin*"/>
                    <exclude name="com/nvidia/spark/ExclusiveModeGpuDiscoveryPlugin*"/>
                    <exclude name="com/nvidia/spark/rapids/ShimLoader*"/>
                    <exclude name="com/nvidia/spark/rapids/SparkShims*"/>
                    <exclude name="com/nvidia/spark/rapids/SparkShimServiceProvider*"/>
                    <exclude name="com/nvidia/spark/rapids/SQLExecPlugin*"/>
                    <exclude name="com/nvidia/spark/udf/Plugin*"/>

                    <exclude name="com/google/flatbuffers/**"/>
                    <exclude name="libjucx.so"/>
                    <exclude name="org/openucx/**"/>
                  </patternset>
                </unzip>
                <unzip
                        src="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}-spark302.jar"
                        dest="${project.build.directory}/parallel-world/spark302"
                >
                  <patternset refid="shimPattern"/>
                </unzip>
                <unzip
                        src="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}-spark303.jar"
                        dest="${project.build.directory}/parallel-world/spark303"
                >
                  <patternset refid="shimPattern"/>
                </unzip>
                <unzip
                        src="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}-spark311.jar"
                        dest="${project.build.directory}/parallel-world/spark311"
                >
                  <patternset refid="shimPattern"/>
                </unzip>
                <unzip
                        src="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}-spark312.jar"
                        dest="${project.build.directory}/parallel-world/spark312"
                >
                  <patternset refid="shimPattern"/>
                </unzip>
                <jar
                        destfile="${project.build.directory}/rapids-4-spark_${scala.binary.version}-${project.version}.jar"
                        basedir="${project.build.directory}/parallel-world"
                >
                </jar>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>update_config</id>
            <phase>verify</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <launchers>
                <launcher>
                  <id>update_rapids_config</id>
                  <mainClass>com.nvidia.spark.rapids.RapidsConf</mainClass>
                  <args>
                    <arg>${project.basedir}/../docs/configs.md</arg>
                  </args>
                </launcher>
              </launchers>
            </configuration>
          </execution>
          <execution>
            <id>update_supported</id>
            <phase>verify</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <launchers>
                <launcher>
                  <id>update_rapids_support</id>
                  <mainClass>com.nvidia.spark.rapids.SupportedOpsDocs</mainClass>
                  <args>
                    <arg>${project.basedir}/../docs/supported_ops.md</arg>
                  </args>
                </launcher>
              </launchers>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>pre-merge</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>if_modified_files</id>
                <phase>verify</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>bash</executable>
                  <commandlineArgs>-c 'export MODIFIED=$(git status --porcelain | grep "^ M"); [[ -z $MODIFIED ]] &amp;&amp; exit 0 || { echo -e "found modified files during mvn verify:\n$MODIFIED"; exit 1;}'</commandlineArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
    </profile>
  </profiles>

</project>
