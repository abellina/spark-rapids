// Copyright (c) 2020, NVIDIA CORPORATION.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace com.nvidia.spark.rapids.format;

enum CodecType : byte {
  /// data simply copied, codec is only for testing
  COPY = -1,

  /// no compression codec was used on the data
  UNCOMPRESSED = 0,

  /// data compressed with the nvcomp LZ4 codec
  NVCOMP_LZ4 = 1,
}

/// Descriptor for a compressed buffer
table CodecBufferDescriptor {
  /// the compression codec used
  codec: CodecType;

  /// byte offset from the start of the enclosing compressed buffer
  /// where the compressed data begins
  compressed_offset: long;

  /// size of the compressed data in bytes
  compressed_size: long;

  /// byte offset from the start of the enclosing uncompressed buffer
  /// where the uncompressed data should be written
  uncompressed_offset: long;

  /// size of the uncompressed data in bytes
  uncompressed_size: long;
}

table BufferMeta {
  /// ID of this buffer
  id: int;

  /// size of the buffer data in bytes
  size: long;

  /// size of the uncompressed buffer data
  uncompressed_size: long;

  /// array of codec buffer descriptors if the data is compressed
  codec_buffer_descrs: [CodecBufferDescriptor];
}

/// Descriptor for a buffer within another uncompressed buffer.
struct SubBufferMeta {
  /// byte-offset from the start of the buffer where this buffer begins
  offset: long;

  /// size in bytes of the buffer
  length: long;
}

/// Metadata about cuDF Columns
table ColumnMeta {
  /// number of nulls in the column or -1 if unknown
  null_count: long;

  /// number of rows in the column
  row_count: long;

  /// information about the column data buffer
  data: SubBufferMeta;

  /// information about the column validity buffer
  validity: SubBufferMeta;

  /// information about the column offset buffer
  offsets: SubBufferMeta;

  /// child column metadata
  children: [ColumnMeta];

  /// ordinal of DType enum
  dtype: int;
}

/// Metadata about cuDF tables
table TableMeta {
  /// metadata about the table buffer
  buffer_meta: BufferMeta;

  /// metadata for each column in the table buffer
  column_metas: [ColumnMeta];

  /// number of rows in the table
  row_count: long;
}


table BlockMeta {
  /// metadata about a shuffle block
  table_metas: [TableMeta];
}
